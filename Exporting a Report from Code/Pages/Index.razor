@page "/"
@using Stimulsoft.Base
@using Stimulsoft.Report
@using Stimulsoft.Report.Blazor
@using Stimulsoft.Report.Web
@inject HttpClient Http
@inject IJSRuntime JSRuntime

<div align="center">
    <button @onclick="ExportReportAsHTML">Export as HTML</button> &nbsp; <button @onclick="ExportReportAsPDF">Export as PDF</button>
    <br /><br />
    <p>@message</p>
</div>

@code
{
    private MarkupString message;

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        //How to activate
        //Stimulsoft.Base.StiLicense.Key = "6vJhGtLLLz2GNviWmUTrhSqnO...";
        //var licenseStream = await Http.GetStreamAsync("Secret/license.key");
        //Stimulsoft.Base.StiLicense.LoadFromStream(licenseStream);

        //Initialize JSRuntime service
        StiBlazorHelper.Initialize(JSRuntime);
    }

    private async Task ExportReportAsHTML()
    {
        //Create empty report object
        var report = new StiReport();

        //Load report template
        var reportBytes = await Http.GetByteArrayAsync("Reports/TwoSimpleLists.mrt");
        report.Load(reportBytes);

        //Render, without showing progress
        report.Render(false);

        //Response as HMTL file
        StiReportResponse.ResponseAsHtml(report);

        message = new MarkupString("Export to HTML is completed.");
    }

    private async Task ExportReportAsPDF()
    {
        //Create empty report object
        var report = new StiReport();

        //Load report template
        var reportBytes = await Http.GetByteArrayAsync("Reports/TwoSimpleLists.mrt");
        report.Load(reportBytes);

        //Render, without showing progress
        report.Render(false);

        //Response as PDF file
        StiReportResponse.ResponseAsPdf(report);

        message = new MarkupString("Export to PDF is completed.");
    }
}